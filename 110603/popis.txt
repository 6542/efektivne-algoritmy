110603 - Counting
-----------------

Gustavo knows how to count, but he is now learning how write numbers. As he is a very good student,
he already learned 1, 2, 3 and 4. But he didn't realize yet that 4 is different than 1, so he thinks
that 4 is another way to write 1. Besides that, he is having fun with a little game he created himself:
he make numbers (with those four digits) and sum their values. For instance:

132 = 1 + 3 + 2 = 6

112314 = 1 + 1 + 2 + 3 + 1 + 1 = 9 (remember that Gustavo thinks that 4 = 1)

After making a lot of numbers in this way, Gustavo now wants to know how much numbers he can create
such that their sum is a number n. For instance, for n = 2 he noticed that he can make 5 numbers:
11, 14, 41, 44 and 2 (he knows how to count them up, but he doesn't know how to write five).
However, he can't figure it out for n greater than 2. So, he asked you to help him.

INPUT

Input will consist on an arbitrary number of sets. Each set will consist on an
integer n such that 1 <= n <= 1000. You must read until you reach the end of file.

OUTPUT

For each number read, you must output another number (on a line alone) stating how much
numbers Gustavo can make such that the sum of their digits is equal to the given number.

ANALYSIS

- From the problem, we know f(1) = 2, f(2) = 5
- From the sample Input/Output, we know f(3) = 13
- A number can only start from 1, 2, 3, or 4
- If it starts from 1, then the remaining n-1 digits should have a summation of n-1
- If it starts from 2, then the remaining n-1 digits should have a summation of n-2
- If it starts from 3, then the remaining n-1 digits should have a summation of n-3
- If it starts from 4, then the remaining n-1 digits should have a summation of n-1 (because 4 is another way to write 1)
- So, f(n) = 2f(n-1) + f(n-2) + f(n-3)
- For this problem we can build a table for all f(n),1 <= n <= 1000
- Remember to use big number library!